<!DOCTYPE html>
<html>
  <head>
    <title>Chat Room</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss/dist/tailwind.min.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
    />
    <style>
      body {
        background: linear-gradient(135deg, #1a202c, #4b5563);
        background-size: 400% 400%;
        animation: gradientBackground 15s ease infinite;
        color: #f7fafc;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        padding: 1rem;
        font-family: "Poppins", sans-serif;
      }

      @keyframes gradientBackground {
        0% {
          background-position: 0% 50%;
        }
        50% {
          background-position: 100% 50%;
        }
        100% {
          background-position: 0% 50%;
        }
      }

      #messages {
        height: 70vh;
        width: 100%;
        max-width: 600px;
        border-radius: 0.5rem;
        overflow-y: auto;
        padding: 1rem;
        background: rgba(45, 55, 72, 0.8);
        backdrop-filter: blur(10px);
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
      }

      #messages li {
        margin-bottom: 1rem;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        transition: all 0.2s ease-in-out;
        animation: fadeIn 0.3s ease-in-out;
      }

      @keyframes fadeIn {
        0% {
          opacity: 0;
          transform: translateY(-10px);
        }
        100% {
          opacity: 1;
          transform: translateY(0);
        }
      }

      #messages li span {
        font-size: 0.875rem;
        color: #a0aec0;
      }
      #messages li p {
        background: linear-gradient(135deg, #6b46c1, #e83e8c);
        padding: 0.5rem 1rem;
        border-radius: 1rem;
        word-wrap: break-word;
        color: #f7fafc;
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
        transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
      }

      #messages li p:hover {
        box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25),
          0 10px 10px rgba(0, 0, 0, 0.22);
      }

      #messages video,
      #messages img {
        max-width: 100%;
        border-radius: 0.375rem;
        margin-top: 0.5rem;
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
      }

      #messageForm {
        position: fixed;
        bottom: 1rem;
        left: 1rem;
        right: 1rem;
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        background: rgba(45, 55, 72, 0.8);
        backdrop-filter: blur(10px);
        border-radius: 0.5rem;
        padding: 0.5rem;
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
      }

      #messageInput {
        flex-grow: 1;
        border-radius: 0.375rem;
        padding: 0.5rem 1rem;
        background-color: #1a202c;
        color: #f7fafc;
        outline: none;
        transition: all 0.2s ease-in-out;
      }

      #messageInput:focus {
        box-shadow: 0 0 0 2px rgba(107, 70, 193, 0.5);
      }

      .file-input-label {
        border-radius: 0.375rem;
        padding: 0.5rem;
        cursor: pointer;
        display: flex;
        align-items: center;
        margin-left: 0.5rem;
        transition: all 0.2s ease-in-out;
      }

      .file-input-label:hover {
        background: linear-gradient(135deg, #6b46c1, #e83e8c);
      }

      .file-input-label svg {
        width: 1.5rem;
        height: 1.5rem;
        color: #718096;
      }

      #fileInput {
        display: none;
      }

      #sendButton {
        background: linear-gradient(135deg, #6b46c1, #e83e8c);
        color: #fff;
        border-radius: 0.375rem;
        padding: 0.5rem 1rem;
        margin-left: 0.5rem;
        margin-top: 0.5rem;
        transition: all 0.2s ease-in-out;
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
      }

      #sendButton:hover {
        box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25),
          0 10px 10px rgba(0, 0, 0, 0.22);
      }

      #endRoomButton {
        position: fixed;
        top: 1rem;
        right: 1rem;
        background: linear-gradient(135deg, #e83e8c, #6b46c1);
        color: #fff;
        border-radius: 0.375rem;
        padding: 0.5rem 1rem;
        transition: all 0.2s ease-in-out;
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
      }

      #endRoomButton:hover {
        box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25),
          0 10px 10px rgba(0, 0, 0, 0.22);
      }

      .popup {
        position: fixed;
        top: 1rem;
        left: 50%;
        transform: translateX(-50%);
        background-color: #fff;
        color: #2d3748;
        padding: 0.5rem 1rem;
        border-radius: 0.375rem;
        z-index: 10;
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
        box-shadow: 0 8px 32px 0 rgba(31,38, 135, 0.37);
      }

      .popup.show {
        opacity: 1;
      }

      #recordButton {
        border-radius: 0.375rem;
        padding: 0.5rem;
        cursor: pointer;
        display: flex;
        align-items: center;
        margin-left: 0.5rem;
        transition: all 0.2s ease-in-out;
        background: linear-gradient(135deg, #6b46c1, #e83e8c);
      }

      #recordButton:hover {
        box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25),
          0 10px 10px rgba(0, 0, 0, 0.22);
      }

      #recordButton svg {
        width: 1.5rem;
        height: 1.5rem;
        color: #fff;
      }

      /* User avatars */
      .user-avatar {
        width: 2rem;
        height: 2rem;
        border-radius: 50%;
        background: linear-gradient(135deg, #6b46c1, #e83e8c);
        color: #f7fafc;
        display: flex;
        justify-content: center;
        align-items: center;
        font-weight: 600;
        margin-right: 0.5rem;
      }

      /* Chat bubble animation */
      @keyframes bounce {
        0% {
          transform: translateY(0);
        }
        50% {
          transform: translateY(-5px);
        }
        100% {
          transform: translateY(0);
        }
      }

      #messages li p {
        animation: bounce 0.5s ease-in-out;
      }

      @media (max-width: 600px) {
        #messageForm {
          position: static;
          margin-top: 1rem;
        }

        #messageInput {
          width: 100%;
          margin-bottom: 0.5rem;
        }
        #sendButton {
          margin-left: auto;
          display: block;
        }
      }
    </style>
  </head>
  <body>
    <h1 class="text-3xl font-bold mb-4">Room: <%= roomId %></h1>
    <div id="messages">
      <div id="typingIndicator" class="hidden">
        <span class="user-avatar">...</span>
        <span>Someone is typing...</span>
      </div>
    </div>
    <form id="messageForm">
      <input
        id="messageInput"
        autocomplete="off"
        placeholder="Type your message..."
      />
      <label for="fileInput" class="file-input-label">
        <svg
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"
          ></path>
        </svg>
        <input id="fileInput" type="file" />
      </label>
      <button id="recordButton" type="button">
        <i class="fas fa-microphone"></i>
      </button>
      <button id="sendButton" type="submit">Send</button>
    </form>
    <button id="endRoomButton" class="hidden">End Room</button>
    <div class="popup"></div>
  </body>
</html>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io();
      const popup = document.querySelector(".popup");

      let mediaRecorder;
      let chunks = [];

      // Join the room
      socket.emit("join room", "<%= roomId %>");

      // Listen for chat messages
      socket.on("chat message", (username, msg, fileUrl) => {
        const item = document.createElement("li");
        const userNameSpan = document.createElement("span");
        userNameSpan.textContent = username;
        const messageContent = document.createElement("p");
        messageContent.textContent = msg;
        item.appendChild(userNameSpan);
        item.appendChild(messageContent);
        if (fileUrl) {
          let fileElement;
          console.log("file url", fileUrl);
          if (fileUrl.endsWith(".mp4")) {
            fileElement = document.createElement("video");
            fileElement.type = "video/mp4";
          } else if (fileUrl.endsWith(".webm")) {
            fileElement = document.createElement("audio");
            fileElement.type = "audio/webm";
          } else {
            fileElement = document.createElement("img");
          }
          fileElement.src = fileUrl;
          fileElement.controls = true; // add controls to the audio/video
          item.appendChild(fileElement);
        }
        const messages = document.getElementById("messages");
        messages.appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);

        messages.scrollTop = messages.scrollHeight - messages.clientHeight;
      });

      // Send a chat message
      document.getElementById("messageForm").addEventListener("submit", (e) => {
        e.preventDefault();
        const messageInput = document.getElementById("messageInput");
        const fileInput = document.getElementById("fileInput");
        const file = fileInput.files[0];
        if (file) {
          const formData = new FormData();
          formData.append("file", file);
          fetch("/upload", {
            method: "POST",
            body: formData,
          })
            .then((response) => response.json())
            .then((data) => {
              socket.emit(
                "chat message",
                "<%= roomId %>",
                messageInput.value,
                data.fileUrl
              );
            });
        } else {
          socket.emit("chat message", "<%= roomId %>", messageInput.value);
        }
        messageInput.value = "";
        fileInput.value = "";
      });

      // Start recording
      function startRecording() {
        navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {
          mediaRecorder = new MediaRecorder(stream);
          mediaRecorder.start();

          mediaRecorder.ondataavailable = (e) => {
            chunks.push(e.data);
          };

          mediaRecorder.onstop = (e) => {
            const blob = new Blob(chunks, { type: "audio/webm" });
            chunks = [];

            // Upload the audio file
            const formData = new FormData();
            formData.append("file", blob, "audio.webm"); // append the .webm extension
            fetch("/upload", {
              method: "POST",
              body: formData,
            })
              .then((response) => response.json())
              .then((data) => {
                socket.emit("chat message", "<%= roomId %>", "", data.fileUrl);
              });
          };
        });
      }

      // Stop recording
      function stopRecording() {
        if (mediaRecorder) {
          mediaRecorder.stop();
        }
      }

      let isRecording = false;

      document.getElementById("recordButton").addEventListener("click", () => {
        if (isRecording) {
          stopRecording();
        } else {
          startRecording();
        }
        isRecording = !isRecording;
      });

      socket.on("admin", (isAdmin) => {
        const endRoomButton = document.getElementById("endRoomButton");
        if (isAdmin) {
          endRoomButton.classList.remove("hidden"); // show the "End Room" button
        } else {
          endRoomButton.classList.add("hidden"); // hide the "End Room" button
        }
      });

      socket.on("user connected", (username) => {
        // Show the popup
        popup.textContent = `${username} has joined the room`;
        popup.classList.add("show");

        // Hide the popup after 3 seconds
        setTimeout(() => {
          popup.classList.remove("show");
        }, 3000);
      });

      // Listen for user disconnected
      socket.on("user disconnected", (username) => {
        const item = document.createElement("li");
        item.textContent = `${username} has left the room`;
        const messages = document.getElementById("messages");
        messages.appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);
      });

      // Listen for user count
      socket.on("user count", (count) => {
        // Show the popup
        popup.textContent = `There are now ${count} users in the room`;
        popup.classList.add("show");

        // Hide the popup after 3 seconds
        setTimeout(() => {
          popup.classList.remove("show");
        }, 3000);
      });

      document.getElementById("endRoomButton").addEventListener("click", () => {
        socket.emit("end room", "<%= roomId %>"); // emit an "end room" event
      });

      socket.on("room ended", () => {
        alert("Room has been ended by the admin");
        window.location.href = "/"; // redirect to the home page
      });
    </script>
  </body>
</html>
